#!/usr/bin/env swift

#if os(Linux)
    import Glibc
#else
    import Darwin
#endif

class Vapor {
    var arguments: [String]

    var release = false
    var swift2 = false
    var appModule = "App"

    var flags: [String]
    var wantsHelp = false

    init(arguments: [String]) {
        var commands: [String] = []
        var flags: [String] = []

        for argument in arguments {
            if argument.characters.first == "-"  {
                if argument == "--release" {
                    release = true
                } else if argument == "--swift2.2" {
                    swift2 = true
                } else if argument == "--help" {
                    wantsHelp = true
                } else if argument.hasPrefix("--module=") {
                    let startIndex = argument.startIndex
                    appModule = argument[startIndex.advanced(by: 9)..<startIndex.advanced(by: argument.characters.count)]
                } else {
                    flags.append(argument)
                }
            } else {
                commands.append(argument)
            }
        }

        self.arguments = commands
        self.flags = flags
    }

    func start() {
        if arguments.count > 1, let command = Command(rawValue: arguments[1]) {
            switch command {
            case .Clean:
                clean()
            case .Build:
                build()
            case .Run:
                run()
            case .New:
                newProject()
            }
        } else if(wantsHelp && arguments.count < 2) {
            help()
        } else if(!swift2) {
            delegate()
        } else {
            fail("Unknown command: \(Process.arguments[1])")
        }
    }

    #if !swift(>=3.0)
        typealias ErrorProtocol = ErrorType
    #endif

    enum Error: ErrorProtocol {
        case System(Int32)
    }

    enum Command: String {
        case Clean = "clean"
        case Build = "build"
        case Run = "run"
        case New = "new"

        static var all: [Command] = [.Clean, .Build, .Run, .New]
    }

    func printUsage() {
        let names = Command.all.map { command in
            return command.rawValue
        }

        #if swift(>=3.0)
            print("Usage: \(arguments[0]) [\(names.joined(separator: "|"))]")
        #else
            print("Usage: \(arguments[0]) [\(names.joinWithSeparator("|"))]")
        #endif
    }

    func run(command: String) throws {
        let result = system(command)

        if result != 0 {
            throw Error.System(result)
        }
    }

    func run(command: String, orFail errorMessage: String) {
        do {
            try run(command)
        } catch {
            fail(errorMessage)
        }
    }

    func fail(message: String) {
        print("Error: \(message)")
        exit(1)
    }

    func clean() {
        run("rm -rf Packages .build", orFail: "Could not clean")
        print("Cleaned.")
    }

    func build() {
        if swift2 {
            buildSwift2()
        } else {
            buildSwift3()
        }
    }

    func buildSwift3() {
        do {
            var buildFlags = ""
            if release {
                buildFlags = "-c release"
            }
            try run("swift build \(buildFlags)")
        } catch {
            print()
            print("Usage: vapor build")
            print("Make sure you are running Apple Swift version 3.0.")
            print("Vapor only supports the latest snapshot.")
            print("Use --swift2.2 to build for Swift 2.2")
            print("Run swift --version to check your version.")
            print()
            fail("Could not build project.")
        }
    }

    func buildSwift2() {
        print("Building...")
        run("mkdir -p .build", orFail: "Could not create .build directory")

        #if os(Linux)
            let cc = "swiftc"
            let include = "/usr/local/include/vapor/"
            let lib = "/usr/local/lib/"
            let rpath = "-Xlinker -rpath -Xlinker /usr/local/lib/"
        #else
            let cc = "xcrun -sdk macosx swiftc"
            let include = "/usr/local/opt/vapor/include/"
            let lib = "/usr/local/opt/vapor/lib/"
            let rpath = ""
        #endif

        var cflags = ""
        if release {
            cflags = "-O"
        }

        var files = "App/main.swift App/**/*.swift"

        if arguments.count >= 3 {
            files = ""
            for i in 2..<arguments.count {
                files += " " + arguments[i]
            }
        }

        do {
            try run("\(cc) \(cflags) \(files) -I \(include) -L \(lib) -lVapor -lJay -lHummingbird -llibc -lStrand \(rpath) -o .build/VaporApp")
            print("Built: .build/VaporApp")
        } catch {
            print()
            print("Usage: vapor build [file1, file2, ...]")
            print("Make sure you are running Apple Swift version 2.2.")
            print("Run \(cc) --version to check your version.")
            print()
            fail("Could not build project.")
        }
    }

    func run() {
        if arguments.count <= 2 {
            if wantsHelp {
                wantsHelp = false
                arguments[1] = "list"
            } else {
                arguments[1] = "serve"
            }
        } else {
            arguments.removeFirst()
        }

        delegate()
    }

    func delegate() {
        var arguments: [String]

        if self.arguments.count >= 2 {
            arguments = Array(self.arguments[1..<self.arguments.count])
        } else {
            arguments = []
        }

        do {
            if swift2 {
                try run(".build/VaporApp")
            } else {
                let folder = release ? "release" : "debug"
                var args: String

                #if swift(>=3.0)
                    args = flags.joined(separator: " ")
                #else
                    args = flags.joinWithSeparator(" ")
                #endif

                if wantsHelp {
                    args += " --help"
                }

                #if swift(>=3.0)
                    args += " " + arguments.joined(separator: " ")
                #else
                    args += " " + arguments.joinWithSeparator(" ")
                #endif

                try run(".build/\(folder)/\(appModule) \(args)")
            }
        } catch Error.System(let result) {
            if result != 2 {
                fail("Could not run project")
            }
        } catch {
            fail("Unknown error")
        }
    }

    func newProject() {
        if arguments.count < 3 {
            print("Usage: \(arguments[0]) \(arguments[1]) <project-name>")
            fail("Invalid number of arguments.")
        }
        let name = arguments[2]

        do {
            let escapedName = "\"\(name)\"" // FIX: Doesnâ€™t support names with quotes
            try run("mkdir \(escapedName)")
            try run("curl -L https://github.com/qutheory/vapor-example/archive/master.tar.gz > \(escapedName)/vapor-example.tar.gz")
            try run("tar -xzf \(escapedName)/vapor-example.tar.gz --strip-components=1 --directory \(escapedName)")
            let _ = try? run("rm \(escapedName)/vapor-example.tar.gz")
            print()
            print("Project \"\(name)\" has been created.")
            print("Enjoy!")
            print()
        } catch {
            fail("Could not clone repository")
        }
    }

    func help() {
        print()
        printUsage()
        print()
        print("Flags:")
        print("  --release")
        print("    Builds and runs with optimizations")
        print()
        print("  --swift2.2")
        print("    Builds and runs using Swift 2.2")
        print()
        print("Options:")
        print("  build [file1, file2, ...]")
        print("    Builds source files and links Vapor libs.")
        print("    Defaults to App/ folder structure.")
        print()
        print("  run")
        print("    Runs the executable built by vapor build.")
        print("    To pass arguments to the program, ")
        print("    run it manually .build/VaporApp")
        print()
        print("  new <project-name>")
        print("    Clones the Vapor Example to a given ")
        print("    folder name and removes .git.")
        print()
        print("  clean")
        print()
        print("  help")
        print()
        print("Community:")
        print("  Join our Slack if you have questions, ")
        print("  need help, or want to contribute.")
        print("  http://slack.qutheory.io")
        print()
    }
}

let cli = Vapor(arguments: Process.arguments)
cli.start()

exit(0)
