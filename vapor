#!/usr/bin/env swift

#if os(Linux)
	import Glibc
#else
	import Darwin
#endif

class Vapor {
	var arguments: [String]

	init(arguments: [String]) {
		self.arguments = arguments

		if arguments.count < 2 {
			printUsage()
			exit(1)
		}
	}

	func start() {
		if let command = Command(rawValue: arguments[1]) {
			switch command {
			case .Clean:
				clean()
			case .Build:
				build()
			case .Run:
				run()
			case .New:
				newProject()
			case .Help:
				help()
			}

			exit(0)
		} else {
			print("Error: Unknown command: \(Process.arguments[1])")
			exit(1)
		}
	}

	enum Error: ErrorType {
		case System(Int32)
	}

	enum Command: String {
		case Clean = "clean"
		case Build = "build"
		case Run = "run"
		case New = "new"
		case Help = "help"

		static var all: [Command] = [.Clean, .Build, .Run, .New, .Help]
	}

	func printUsage() {
		let names = Command.all.map { command in
			return command.rawValue
		}

		print("Usage: \(arguments[0]) [\(names.joinWithSeparator("|"))]")
	}

	func run(command: String) throws {
		let result = system(command)

		if result != 0 {
			throw Error.System(result)
		}
	}

	func run(command: String, orFail errorMessage: String) {
		do {
			try run(command)
		} catch {
			print("Error: \(errorMessage)")
			exit(1)
		}
	}

	func clean() {
		print("Cleaning...")
		run("rm -rf .build", orFail: "Could not clean")
	}

	func build() {
		print("Building...")
		run("mkdir -p .build", orFail: "Could not create .build directory")

		#if os(Linux)
			let cc = "swiftc"
		#else
			let cc = "xcrun -sdk macosx swiftc"
		#endif

		var files = ""
		if arguments.count >= 3 {
			for i in 2..<arguments.count {
				files += " " + arguments[i]
			}
		} else {
			files = "App/main.swift App/**/*.swift"
		}

		do {
			try run("\(cc) \(files) -I /usr/local/opt/vapor/include/ -L /usr/local/opt/vapor/lib/ -lVapor -lJay -lHummingbird -llibc -lStrand -o .build/VaporApp")
			print("Built: .build/VaporApp")
		} catch {
			print("Error: Could not build project.")
			print("Usage: vapor build [file1, file2, ...]")
			print("Make sure you are running Apple Swift version 2.2.")
			print("Run \(cc) --version to check your version.")
			exit(1)
		}
	}

	func run() {
		print("Running...")
		run(".build/VaporApp", orFail: "Could not run Application.")
	}

	func newProject() {
		print("New...")

		if arguments.count < 3 {
			print("Usage: \(arguments[0]) \(arguments[1]) <project-name>")
			exit(1)
		}
		let name = arguments[2]

		do {
			try run("git clone https://github.com/qutheory/vapor-example.git \(name)") 
			let _ = try? run("rm -rf \(name)/.git")
			print("Enjoy")
		} catch {
			print("Error: Could not clone repository")
			exit(1)
		}
	}

	func help() {
		printUsage()
		print("")
		print("Options:")
		print("\tbuild [file1, file2, ...]")
		print("\t\tBuilds source files and links Vapor libraries.")
		print("\t\tDefaults to App/ folder structure if no files passed.")
		print()
		print("\trun")
		print("\t\tRuns the executable built by vapor build.")
		print("\t\tTo pass arguments to the program, run it manually .build/VaporApp")
		print()
		print("\tnew <project-name>")
		print("\t\tClones the Vapor Example to a given folder name and removes .git.")
		print()
		print("\tclean")
		print()
		print("\thelp")
	}
}

let cli = Vapor(arguments: Process.arguments)
cli.start()
